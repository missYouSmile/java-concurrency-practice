1. 无锁并发编程: 多线程竞争锁的过程中, 会引起上下文切换. 所以, 不让程序出现共享数据, 避免锁的竞争可以有效的减少线程的切换.
基本的实现思路是: 数据分片, 没个线程只处理对应的那一块的数据, 并且得到其独立的结果.
2. CAS 算法. 其实底层同样是使用锁的机制来完成的, 只是该锁是 CPU 级别的.
3. 使用最少的线程, 即: 尽量不使用多线程, 如: Redis 就是单线程的, 但是别人同样的快
4. 协程: 在单个线程中实现多任务的调度, 并在单线程里维持多个任务间的切换.

分析工具: jstack [pid]